$column-count: 12 !default;
$column-selector: '%col' !default;
$offset-modifier: 'offset' !default;

$gutter-width: 1rem !default;
$outer-margin: 1rem !default;
$gutter-compensation: (($gutter-width / 2) * -1) !default;
$half-gutter-width: ($gutter-width / 2) !default;

$width-xs: 30 !default;
$width-sm: 46 !default;
$width-md: 56 !default;
$width-lg: 75 !default;
$width-xl: 90 !default;

$viewport-xs: #{$width-xs}em !default;
$viewport-sm: #{$width-sm}em !default;
$viewport-md: #{$width-md}em !default;
$viewport-lg: #{$width-lg}em !default;
$viewport-xl: #{$width-xl}em !default;

$container-sm: #{$width-sm}rem + $gutter-width !default;
$container-md: #{$width-md}rem + $gutter-width !default;
$container-lg: #{$width-lg}rem + $gutter-width !default;
$container-xl: #{$width-xl}rem + $gutter-width !default;

$xs: 'xs' !default;
$sm: 'sm' !default;
$md: 'md' !default;
$lg: 'lg' !default;
$xl: 'xl' !default;

$block-delimiter: '-' !default;
$element-delimiter: '-' !default;
$modifier-delimiter: '-' !default;

$defaultQuery: $viewport-xs !default;
$sizes: ($xs, $sm, $md, $lg, $xl) !default;
$queries: (#{$xs}:#{$viewport-xs}, #{$sm}:#{$viewport-sm}, #{$md}:#{$viewport-md}, #{$lg}:#{$viewport-lg}, #{$xl}:#{$viewport-xl}) !default;

$column-properties: 'flex-basis', 'max-width' !default;
$offset-properties: 'margin-left' !default;

@mixin autoWidth() {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
}

@mixin percentWidth($property, $columns, $count) {
    #{$property}: ((100% / $columns) * $count);
}

@mixin percentOffset($property, $columns, $count) {
    $single-column-width: ((100% / $columns) * 1);
    #{$property}: $single-column-width * $count;
}

@mixin queries($key, $queries) {
    $query: map-get($queries, $key);
    @if ($query == $defaultQuery) {
        @content;
    } @else {
        @media screen and (min-width: #{$query}) {
            @content;
        }
    }
}

// Soluci√≥n a problema con imaxes responsive en flexbox:
// http://stackoverflow.com/a/26916542/1203176
* {
    min-width: 0;
    min-height: 0;
}

%container-fluid {
    margin-right: auto;
    margin-left: auto;
    padding-right: $outer-margin;
    padding-left: $outer-margin;
}

%row {
    box-sizing: border-box;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    margin-right: $gutter-compensation;
    margin-left: $gutter-compensation;
}

%column {
    box-sizing: border-box;
    flex-grow: 0;
    flex-shrink: 0;
    padding-right: $half-gutter-width;
    padding-left: $half-gutter-width;
}

@each $size in $sizes {
    @for $i from 0 through $column-count {
        $query: map-get($queries, $size);
        @if ($query == $defaultQuery) {
            @if ($i == 0) {
                #{$column-selector}#{$block-delimiter}#{$size} {
                    @extend %column;
                    @include autoWidth();
                }

            } @else {
                #{$column-selector}#{$block-delimiter}#{$size}#{$modifier-delimiter}#{$i} {
                    @extend %column;
                    @each $prop in $column-properties {
                        @include percentWidth($prop, $column-count, $i);
                    }
                }
            }
        } @else {
            @if ($i == 0) {
                #{$column-selector}#{$block-delimiter}#{$size} {
                    @extend %column;
                    @media screen and (min-width: #{$query}) {
                        @include autoWidth();
                    }
                }
            } @else {
                #{$column-selector}#{$block-delimiter}#{$size}#{$modifier-delimiter}#{$i} {
                    @extend %column;
                    @media screen and (min-width: #{$query}) {
                        @each $prop in $column-properties {
                            @include percentWidth($prop, $column-count, $i);
                        }
                    }
                }
            }
        }
    }
    @for $i from 1 through $column-count {
        $query: map-get($queries, $size);
        @if ($query == $defaultQuery) {
            #{$column-selector}#{$block-delimiter}#{$size}#{$modifier-delimiter}#{$offset-modifier}#{$modifier-delimiter}#{$i} {
                @extend %column;
                @each $prop in $offset-properties {
                    @include percentOffset($prop, $column-count, $i);
                }
            }
        } @else {
            #{$column-selector}#{$block-delimiter}#{$size}#{$modifier-delimiter}#{$offset-modifier}#{$modifier-delimiter}#{$i} {
                @extend %column;
                @media screen and (min-width: #{$query}) {
                    @each $prop in $offset-properties {
                        @include percentOffset($prop, $column-count, $i);
                    }
                }
            }
        }
    }

    $query: map-get($queries, $size);
    @if ($query == $defaultQuery) {
        %start#{$modifier-delimiter}#{$size} {
            justify-content: flex-start;
        }
        %center#{$modifier-delimiter}#{$size} {
            justify-content: center;
        }
        %end#{$modifier-delimiter}#{$size} {
            justify-content: flex-end;
        }
        %top#{$modifier-delimiter}#{$size} {
            align-items: flex-start;
        }
        %middle#{$modifier-delimiter}#{$size} {
            align-items: center;
        }
        %bottom#{$modifier-delimiter}#{$size} {
            align-items: flex-end;
        }
        %around#{$modifier-delimiter}#{$size} {
            justify-content: space-around;
        }
        %between#{$modifier-delimiter}#{$size} {
            justify-content: space-between;
        }
        %first#{$modifier-delimiter}#{$size} {
            order: -1;
        }
        %last#{$modifier-delimiter}#{$size} {
            order: 1;
        }
        %reverse#{$modifier-delimiter}#{$size} {
            flex-direction: row-reverse;
        }
    } @else {
        %start#{$modifier-delimiter}#{$size} {
            @media screen and (min-width: #{$query}) {
                justify-content: flex-start;
            }
        }
        %center#{$modifier-delimiter}#{$size} {
            @media screen and (min-width: #{$query}) {
                justify-content: center;
            }
        }
        %end#{$modifier-delimiter}#{$size} {
            @media screen and (min-width: #{$query}) {
                justify-content: flex-end;
            }
        }
        %top#{$modifier-delimiter}#{$size} {
            @media screen and (min-width: #{$query}) {
                align-items: flex-start;
            }
        }
        %middle#{$modifier-delimiter}#{$size} {
            @media screen and (min-width: #{$query}) {
                align-items: center;
            }
        }
        %bottom#{$modifier-delimiter}#{$size} {
            @media screen and (min-width: #{$query}) {
                align-items: flex-end;
            }
        }
        %around#{$modifier-delimiter}#{$size} {
            @media screen and (min-width: #{$query}) {
                justify-content: space-around;
            }
        }
        %between#{$modifier-delimiter}#{$size} {
            @media screen and (min-width: #{$query}) {
                justify-content: space-between;
            }
        }
        %first#{$modifier-delimiter}#{$size} {
            @media screen and (min-width: #{$query}) {
                order: -1;
            }
        }
        %last#{$modifier-delimiter}#{$size} {
            @media screen and (min-width: #{$query}) {
                order: 1;
            }
        }
        %reverse#{$modifier-delimiter}#{$size} {
            @media screen and (min-width: #{$query}) {
                flex-direction: row-reverse;
            }
        }
    }
}

%row-no-negative-margin {
    display: flex;
    flex-flow: row wrap;
    box-sizing: border-box;
}